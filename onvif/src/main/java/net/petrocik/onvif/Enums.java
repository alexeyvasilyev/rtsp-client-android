package net.petrocik.onvif;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 6.0.1.1
//
// Created by Quasar Development 
//
//----------------------------------------------------




public class Enums
{

    public enum MoveStatus
    {
        
        IDLE(0),
        
        MOVING(1),
        
        UNKNOWN(2);
        
        private int code;
        
        MoveStatus(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static MoveStatus fromString(String str)
        {
            if (str.equals("IDLE"))
                return IDLE;
            if (str.equals("MOVING"))
                return MOVING;
            if (str.equals("UNKNOWN"))
                return UNKNOWN;
		    return null;
        }
    }

    public enum RotateMode
    {
        
        OFF(0),
        
        ON(1),
        
        AUTO(2);
        
        private int code;
        
        RotateMode(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static RotateMode fromString(String str)
        {
            if (str.equals("OFF"))
                return OFF;
            if (str.equals("ON"))
                return ON;
            if (str.equals("AUTO"))
                return AUTO;
		    return null;
        }
    }

    public enum SceneOrientationMode
    {
        
        MANUAL(0),
        
        AUTO(1);
        
        private int code;
        
        SceneOrientationMode(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static SceneOrientationMode fromString(String str)
        {
            if (str.equals("MANUAL"))
                return MANUAL;
            if (str.equals("AUTO"))
                return AUTO;
		    return null;
        }
    }

    public enum VideoEncoding
    {
        
        JPEG(0),
        
        MPEG4(1),
        
        H264(2);
        
        private int code;
        
        VideoEncoding(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static VideoEncoding fromString(String str)
        {
            if (str.equals("JPEG"))
                return JPEG;
            if (str.equals("MPEG4"))
                return MPEG4;
            if (str.equals("H264"))
                return H264;
		    return null;
        }
    }

    public enum Mpeg4Profile
    {
        
        SP(0),
        
        ASP(1);
        
        private int code;
        
        Mpeg4Profile(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static Mpeg4Profile fromString(String str)
        {
            if (str.equals("SP"))
                return SP;
            if (str.equals("ASP"))
                return ASP;
		    return null;
        }
    }

    public enum H264Profile
    {
        
        Baseline(0),
        
        Main(1),
        
        Extended(2),
        
        High(3);
        
        private int code;
        
        H264Profile(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static H264Profile fromString(String str)
        {
            if (str.equals("Baseline"))
                return Baseline;
            if (str.equals("Main"))
                return Main;
            if (str.equals("Extended"))
                return Extended;
            if (str.equals("High"))
                return High;
		    return null;
        }
    }

    public enum AudioEncoding
    {
        
        G711(0),
        
        G726(1),
        
        AAC(2);
        
        private int code;
        
        AudioEncoding(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static AudioEncoding fromString(String str)
        {
            if (str.equals("G711"))
                return G711;
            if (str.equals("G726"))
                return G726;
            if (str.equals("AAC"))
                return AAC;
		    return null;
        }
    }

    public enum StreamType
    {
        
        RTP_x002D_Unicast(0,"RTP-Unicast"),
        
        RTP_x002D_Multicast(1,"RTP-Multicast");
        
        private int code;
        private java.lang.String xmlValue;
        
        StreamType(int code ,java.lang.String xmlValue){
            this.code = code;
            this.xmlValue=xmlValue;
        }

        public int getCode(){
		    return code;
	    }
    @Override
        public String toString() {
            return xmlValue;
        }
        public static StreamType fromString(String str)
        {
            if (str.equals("RTP-Unicast"))
                return RTP_x002D_Unicast;
            if (str.equals("RTP-Multicast"))
                return RTP_x002D_Multicast;
		    return null;
        }
    }

    public enum TransportProtocol
    {
        
        UDP(0),
        
        TCP(1),
        
        RTSP(2),
        
        HTTP(3);
        
        private int code;
        
        TransportProtocol(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static TransportProtocol fromString(String str)
        {
            if (str.equals("UDP"))
                return UDP;
            if (str.equals("TCP"))
                return TCP;
            if (str.equals("RTSP"))
                return RTSP;
            if (str.equals("HTTP"))
                return HTTP;
		    return null;
        }
    }

    public enum ScopeDefinition
    {
        
        Fixed(0),
        
        Configurable(1);
        
        private int code;
        
        ScopeDefinition(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static ScopeDefinition fromString(String str)
        {
            if (str.equals("Fixed"))
                return Fixed;
            if (str.equals("Configurable"))
                return Configurable;
		    return null;
        }
    }

    public enum DiscoveryMode
    {
        
        Discoverable(0),
        
        NonDiscoverable(1);
        
        private int code;
        
        DiscoveryMode(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static DiscoveryMode fromString(String str)
        {
            if (str.equals("Discoverable"))
                return Discoverable;
            if (str.equals("NonDiscoverable"))
                return NonDiscoverable;
		    return null;
        }
    }

    public enum Duplex
    {
        
        Full(0),
        
        Half(1);
        
        private int code;
        
        Duplex(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static Duplex fromString(String str)
        {
            if (str.equals("Full"))
                return Full;
            if (str.equals("Half"))
                return Half;
		    return null;
        }
    }

    public enum IPv6DHCPConfiguration
    {
        
        Auto(0),
        
        Stateful(1),
        
        Stateless(2),
        
        Off(3);
        
        private int code;
        
        IPv6DHCPConfiguration(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static IPv6DHCPConfiguration fromString(String str)
        {
            if (str.equals("Auto"))
                return Auto;
            if (str.equals("Stateful"))
                return Stateful;
            if (str.equals("Stateless"))
                return Stateless;
            if (str.equals("Off"))
                return Off;
		    return null;
        }
    }

    public enum NetworkProtocolType
    {
        
        HTTP(0),
        
        HTTPS(1),
        
        RTSP(2);
        
        private int code;
        
        NetworkProtocolType(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static NetworkProtocolType fromString(String str)
        {
            if (str.equals("HTTP"))
                return HTTP;
            if (str.equals("HTTPS"))
                return HTTPS;
            if (str.equals("RTSP"))
                return RTSP;
		    return null;
        }
    }

    public enum NetworkHostType
    {
        
        IPv4(0),
        
        IPv6(1),
        
        DNS(2);
        
        private int code;
        
        NetworkHostType(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static NetworkHostType fromString(String str)
        {
            if (str.equals("IPv4"))
                return IPv4;
            if (str.equals("IPv6"))
                return IPv6;
            if (str.equals("DNS"))
                return DNS;
		    return null;
        }
    }

    public enum IPType
    {
        
        IPv4(0),
        
        IPv6(1);
        
        private int code;
        
        IPType(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static IPType fromString(String str)
        {
            if (str.equals("IPv4"))
                return IPv4;
            if (str.equals("IPv6"))
                return IPv6;
		    return null;
        }
    }

    public enum IPAddressFilterType
    {
        
        Allow(0),
        
        Deny(1);
        
        private int code;
        
        IPAddressFilterType(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static IPAddressFilterType fromString(String str)
        {
            if (str.equals("Allow"))
                return Allow;
            if (str.equals("Deny"))
                return Deny;
		    return null;
        }
    }

    public enum DynamicDNSType
    {
        
        NoUpdate(0),
        
        ClientUpdates(1),
        
        ServerUpdates(2);
        
        private int code;
        
        DynamicDNSType(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static DynamicDNSType fromString(String str)
        {
            if (str.equals("NoUpdate"))
                return NoUpdate;
            if (str.equals("ClientUpdates"))
                return ClientUpdates;
            if (str.equals("ServerUpdates"))
                return ServerUpdates;
		    return null;
        }
    }

    public enum Dot11StationMode
    {
        
        Ad_x002D_hoc(0,"Ad-hoc"),
        
        Infrastructure(1,"Infrastructure"),
        
        Extended(2,"Extended");
        
        private int code;
        private java.lang.String xmlValue;
        
        Dot11StationMode(int code ,java.lang.String xmlValue){
            this.code = code;
            this.xmlValue=xmlValue;
        }

        public int getCode(){
		    return code;
	    }
    @Override
        public String toString() {
            return xmlValue;
        }
        public static Dot11StationMode fromString(String str)
        {
            if (str.equals("Ad-hoc"))
                return Ad_x002D_hoc;
            if (str.equals("Infrastructure"))
                return Infrastructure;
            if (str.equals("Extended"))
                return Extended;
		    return null;
        }
    }

    public enum Dot11SecurityMode
    {
        
        None(0),
        
        WEP(1),
        
        PSK(2),
        
        Dot1X(3),
        
        Extended(4);
        
        private int code;
        
        Dot11SecurityMode(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static Dot11SecurityMode fromString(String str)
        {
            if (str.equals("None"))
                return None;
            if (str.equals("WEP"))
                return WEP;
            if (str.equals("PSK"))
                return PSK;
            if (str.equals("Dot1X"))
                return Dot1X;
            if (str.equals("Extended"))
                return Extended;
		    return null;
        }
    }

    public enum Dot11Cipher
    {
        
        CCMP(0),
        
        TKIP(1),
        
        Any(2),
        
        Extended(3);
        
        private int code;
        
        Dot11Cipher(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static Dot11Cipher fromString(String str)
        {
            if (str.equals("CCMP"))
                return CCMP;
            if (str.equals("TKIP"))
                return TKIP;
            if (str.equals("Any"))
                return Any;
            if (str.equals("Extended"))
                return Extended;
		    return null;
        }
    }

    public enum Dot11SignalStrength
    {
        
        None(0,"None"),
        
        Very_x0020_Bad(1,"Very Bad"),
        
        Bad(2,"Bad"),
        
        Good(3,"Good"),
        
        Very_x0020_Good(4,"Very Good"),
        
        Extended(5,"Extended");
        
        private int code;
        private java.lang.String xmlValue;
        
        Dot11SignalStrength(int code ,java.lang.String xmlValue){
            this.code = code;
            this.xmlValue=xmlValue;
        }

        public int getCode(){
		    return code;
	    }
    @Override
        public String toString() {
            return xmlValue;
        }
        public static Dot11SignalStrength fromString(String str)
        {
            if (str.equals("None"))
                return None;
            if (str.equals("Very Bad"))
                return Very_x0020_Bad;
            if (str.equals("Bad"))
                return Bad;
            if (str.equals("Good"))
                return Good;
            if (str.equals("Very Good"))
                return Very_x0020_Good;
            if (str.equals("Extended"))
                return Extended;
		    return null;
        }
    }

    public enum Dot11AuthAndMangementSuite
    {
        
        None(0),
        
        Dot1X(1),
        
        PSK(2),
        
        Extended(3);
        
        private int code;
        
        Dot11AuthAndMangementSuite(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static Dot11AuthAndMangementSuite fromString(String str)
        {
            if (str.equals("None"))
                return None;
            if (str.equals("Dot1X"))
                return Dot1X;
            if (str.equals("PSK"))
                return PSK;
            if (str.equals("Extended"))
                return Extended;
		    return null;
        }
    }

    public enum CapabilityCategory
    {
        
        All(0),
        
        Analytics(1),
        
        Device(2),
        
        Events(3),
        
        Imaging(4),
        
        Media(5),
        
        PTZ(6);
        
        private int code;
        
        CapabilityCategory(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static CapabilityCategory fromString(String str)
        {
            if (str.equals("All"))
                return All;
            if (str.equals("Analytics"))
                return Analytics;
            if (str.equals("Device"))
                return Device;
            if (str.equals("Events"))
                return Events;
            if (str.equals("Imaging"))
                return Imaging;
            if (str.equals("Media"))
                return Media;
            if (str.equals("PTZ"))
                return PTZ;
		    return null;
        }
    }

    public enum SystemLogType
    {
        
        System(0),
        
        Access(1);
        
        private int code;
        
        SystemLogType(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static SystemLogType fromString(String str)
        {
            if (str.equals("System"))
                return System;
            if (str.equals("Access"))
                return Access;
		    return null;
        }
    }

    public enum FactoryDefaultType
    {
        
        Hard(0),
        
        Soft(1);
        
        private int code;
        
        FactoryDefaultType(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static FactoryDefaultType fromString(String str)
        {
            if (str.equals("Hard"))
                return Hard;
            if (str.equals("Soft"))
                return Soft;
		    return null;
        }
    }

    public enum SetDateTimeType
    {
        
        Manual(0),
        
        NTP(1);
        
        private int code;
        
        SetDateTimeType(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static SetDateTimeType fromString(String str)
        {
            if (str.equals("Manual"))
                return Manual;
            if (str.equals("NTP"))
                return NTP;
		    return null;
        }
    }

    public enum UserLevel
    {
        
        Administrator(0),
        
        Operator(1),
        
        User(2),
        
        Anonymous(3),
        
        Extended(4);
        
        private int code;
        
        UserLevel(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static UserLevel fromString(String str)
        {
            if (str.equals("Administrator"))
                return Administrator;
            if (str.equals("Operator"))
                return Operator;
            if (str.equals("User"))
                return User;
            if (str.equals("Anonymous"))
                return Anonymous;
            if (str.equals("Extended"))
                return Extended;
		    return null;
        }
    }

    public enum RelayLogicalState
    {
        
        active(0),
        
        inactive(1);
        
        private int code;
        
        RelayLogicalState(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static RelayLogicalState fromString(String str)
        {
            if (str.equals("active"))
                return active;
            if (str.equals("inactive"))
                return inactive;
		    return null;
        }
    }

    public enum RelayIdleState
    {
        
        closed(0),
        
        open(1);
        
        private int code;
        
        RelayIdleState(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static RelayIdleState fromString(String str)
        {
            if (str.equals("closed"))
                return closed;
            if (str.equals("open"))
                return open;
		    return null;
        }
    }

    public enum RelayMode
    {
        
        Monostable(0),
        
        Bistable(1);
        
        private int code;
        
        RelayMode(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static RelayMode fromString(String str)
        {
            if (str.equals("Monostable"))
                return Monostable;
            if (str.equals("Bistable"))
                return Bistable;
		    return null;
        }
    }

    public enum DigitalIdleState
    {
        
        closed(0),
        
        open(1);
        
        private int code;
        
        DigitalIdleState(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static DigitalIdleState fromString(String str)
        {
            if (str.equals("closed"))
                return closed;
            if (str.equals("open"))
                return open;
		    return null;
        }
    }

    public enum EFlipMode
    {
        
        OFF(0),
        
        ON(1),
        
        Extended(2);
        
        private int code;
        
        EFlipMode(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static EFlipMode fromString(String str)
        {
            if (str.equals("OFF"))
                return OFF;
            if (str.equals("ON"))
                return ON;
            if (str.equals("Extended"))
                return Extended;
		    return null;
        }
    }

    public enum ReverseMode
    {
        
        OFF(0),
        
        ON(1),
        
        AUTO(2),
        
        Extended(3);
        
        private int code;
        
        ReverseMode(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static ReverseMode fromString(String str)
        {
            if (str.equals("OFF"))
                return OFF;
            if (str.equals("ON"))
                return ON;
            if (str.equals("AUTO"))
                return AUTO;
            if (str.equals("Extended"))
                return Extended;
		    return null;
        }
    }

    public enum PTZPresetTourState
    {
        
        Idle(0),
        
        Touring(1),
        
        Paused(2),
        
        Extended(3);
        
        private int code;
        
        PTZPresetTourState(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static PTZPresetTourState fromString(String str)
        {
            if (str.equals("Idle"))
                return Idle;
            if (str.equals("Touring"))
                return Touring;
            if (str.equals("Paused"))
                return Paused;
            if (str.equals("Extended"))
                return Extended;
		    return null;
        }
    }

    public enum PTZPresetTourDirection
    {
        
        Forward(0),
        
        Backward(1),
        
        Extended(2);
        
        private int code;
        
        PTZPresetTourDirection(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static PTZPresetTourDirection fromString(String str)
        {
            if (str.equals("Forward"))
                return Forward;
            if (str.equals("Backward"))
                return Backward;
            if (str.equals("Extended"))
                return Extended;
		    return null;
        }
    }

    public enum PTZPresetTourOperation
    {
        
        Start(0),
        
        Stop(1),
        
        Pause(2),
        
        Extended(3);
        
        private int code;
        
        PTZPresetTourOperation(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static PTZPresetTourOperation fromString(String str)
        {
            if (str.equals("Start"))
                return Start;
            if (str.equals("Stop"))
                return Stop;
            if (str.equals("Pause"))
                return Pause;
            if (str.equals("Extended"))
                return Extended;
		    return null;
        }
    }

    public enum AutoFocusMode
    {
        
        AUTO(0),
        
        MANUAL(1);
        
        private int code;
        
        AutoFocusMode(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static AutoFocusMode fromString(String str)
        {
            if (str.equals("AUTO"))
                return AUTO;
            if (str.equals("MANUAL"))
                return MANUAL;
		    return null;
        }
    }

    public enum WideDynamicMode
    {
        
        OFF(0),
        
        ON(1);
        
        private int code;
        
        WideDynamicMode(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static WideDynamicMode fromString(String str)
        {
            if (str.equals("OFF"))
                return OFF;
            if (str.equals("ON"))
                return ON;
		    return null;
        }
    }

    public enum BacklightCompensationMode
    {
        
        OFF(0),
        
        ON(1);
        
        private int code;
        
        BacklightCompensationMode(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static BacklightCompensationMode fromString(String str)
        {
            if (str.equals("OFF"))
                return OFF;
            if (str.equals("ON"))
                return ON;
		    return null;
        }
    }

    public enum ExposurePriority
    {
        
        LowNoise(0),
        
        FrameRate(1);
        
        private int code;
        
        ExposurePriority(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static ExposurePriority fromString(String str)
        {
            if (str.equals("LowNoise"))
                return LowNoise;
            if (str.equals("FrameRate"))
                return FrameRate;
		    return null;
        }
    }

    public enum ExposureMode
    {
        
        AUTO(0),
        
        MANUAL(1);
        
        private int code;
        
        ExposureMode(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static ExposureMode fromString(String str)
        {
            if (str.equals("AUTO"))
                return AUTO;
            if (str.equals("MANUAL"))
                return MANUAL;
		    return null;
        }
    }

    public enum WhiteBalanceMode
    {
        
        AUTO(0),
        
        MANUAL(1);
        
        private int code;
        
        WhiteBalanceMode(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static WhiteBalanceMode fromString(String str)
        {
            if (str.equals("AUTO"))
                return AUTO;
            if (str.equals("MANUAL"))
                return MANUAL;
		    return null;
        }
    }

    public enum IrCutFilterMode
    {
        
        ON(0),
        
        OFF(1),
        
        AUTO(2);
        
        private int code;
        
        IrCutFilterMode(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static IrCutFilterMode fromString(String str)
        {
            if (str.equals("ON"))
                return ON;
            if (str.equals("OFF"))
                return OFF;
            if (str.equals("AUTO"))
                return AUTO;
		    return null;
        }
    }

    public enum ImageStabilizationMode
    {
        
        OFF(0),
        
        ON(1),
        
        AUTO(2),
        
        Extended(3);
        
        private int code;
        
        ImageStabilizationMode(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static ImageStabilizationMode fromString(String str)
        {
            if (str.equals("OFF"))
                return OFF;
            if (str.equals("ON"))
                return ON;
            if (str.equals("AUTO"))
                return AUTO;
            if (str.equals("Extended"))
                return Extended;
		    return null;
        }
    }

    public enum ModeOfOperation
    {
        
        Idle(0),
        
        Active(1),
        
        Unknown(2);
        
        private int code;
        
        ModeOfOperation(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static ModeOfOperation fromString(String str)
        {
            if (str.equals("Idle"))
                return Idle;
            if (str.equals("Active"))
                return Active;
            if (str.equals("Unknown"))
                return Unknown;
		    return null;
        }
    }

    public enum OSDType
    {
        
        Text(0),
        
        Image(1),
        
        Extended(2);
        
        private int code;
        
        OSDType(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static OSDType fromString(String str)
        {
            if (str.equals("Text"))
                return Text;
            if (str.equals("Image"))
                return Image;
            if (str.equals("Extended"))
                return Extended;
		    return null;
        }
    }

    public enum SerialPortType
    {
        
        RS232(0),
        
        RS422HalfDuplex(1),
        
        RS422FullDuplex(2),
        
        RS485HalfDuplex(3),
        
        RS485FullDuplex(4),
        
        Generic(5);
        
        private int code;
        
        SerialPortType(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static SerialPortType fromString(String str)
        {
            if (str.equals("RS232"))
                return RS232;
            if (str.equals("RS422HalfDuplex"))
                return RS422HalfDuplex;
            if (str.equals("RS422FullDuplex"))
                return RS422FullDuplex;
            if (str.equals("RS485HalfDuplex"))
                return RS485HalfDuplex;
            if (str.equals("RS485FullDuplex"))
                return RS485FullDuplex;
            if (str.equals("Generic"))
                return Generic;
		    return null;
        }
    }

    public enum ParityBit
    {
        
        None(0),
        
        Even(1),
        
        Odd(2),
        
        Mark(3),
        
        Space(4),
        
        Extended(5);
        
        private int code;
        
        ParityBit(int code ){
            this.code = code;
        }

        public int getCode(){
		    return code;
	    }
    
        public static ParityBit fromString(String str)
        {
            if (str.equals("None"))
                return None;
            if (str.equals("Even"))
                return Even;
            if (str.equals("Odd"))
                return Odd;
            if (str.equals("Mark"))
                return Mark;
            if (str.equals("Space"))
                return Space;
            if (str.equals("Extended"))
                return Extended;
		    return null;
        }
    }

}