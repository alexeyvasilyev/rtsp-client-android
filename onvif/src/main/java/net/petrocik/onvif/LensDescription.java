package net.petrocik.onvif;
//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 6.0.1.1
//
// Created by Quasar Development 
//
//----------------------------------------------------


import java.util.Hashtable;
import org.ksoap2.serialization.*;
import java.util.ArrayList;
import org.ksoap2.serialization.PropertyInfo;

public  class LensDescription extends AttributeContainer implements KvmSerializable
{

    
    private transient java.lang.Object __source;    
    
    public LensOffset Offset;
    
    public java.util.ArrayList< LensProjection> Projection =new java.util.ArrayList<LensProjection >();
    
    public Float XFactor=0f;
    
    public Float FocalLength=0f;
    
    public java.util.ArrayList< PropertyInfo> any =new java.util.ArrayList< PropertyInfo>();

    

    public void loadFromSoap(java.lang.Object paramObj,ExtendedSoapSerializationEnvelope __envelope)
    {
        if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;
        __source=inObj; 
        
        if(inObj instanceof SoapObject)
        {
            SoapObject soapObject=(SoapObject)inObj;
            int size = soapObject.getPropertyCount();
            for (int i0=0;i0< size;i0++)
            {
                PropertyInfo info=soapObject.getPropertyInfo(i0);
                if(!loadProperty(info,soapObject,__envelope))
                {
                    info= __envelope.getAny(info);
                    this.any.add(info);
                }
            } 
        }

		if (inObj.hasAttribute("FocalLength"))
        {	
            java.lang.Object j = inObj.getAttribute("FocalLength");
            if (j != null)
            {
                FocalLength = Float.valueOf(j.toString());
            }
        }

    }

    
    protected boolean loadProperty(PropertyInfo info,SoapObject soapObject,ExtendedSoapSerializationEnvelope __envelope)
    {
        java.lang.Object obj = info.getValue();
        if (info.name.equals("Offset"))
        {
            if(obj!=null)
            {
                java.lang.Object j = obj;
                this.Offset = (LensOffset)__envelope.get(j,LensOffset.class,false);
            }
            return true;
        }
        if (info.name.equals("Projection"))
        {
            if(obj!=null)
            {
                if(this.Projection==null)
                {
                    this.Projection = new java.util.ArrayList< LensProjection>();
                }
                java.lang.Object j =obj;
                LensProjection j1= (LensProjection)__envelope.get(j,LensProjection.class,false);
                this.Projection.add(j1);
            }
            return true;
        }
        if (info.name.equals("XFactor"))
        {
            if(obj!=null)
            {
                if (obj instanceof SoapPrimitive)
                {
                    SoapPrimitive j =(SoapPrimitive) obj;
                    if(j.toString()!=null)
                    {
                        this.XFactor = Float.valueOf(j.toString());
                    }
                }
                else if (obj instanceof Float){
                    this.XFactor = (Float)obj;
                }
            }
            return true;
        }
        return false;
    }    
    public java.lang.Object getOriginalXmlSource()
    {
        return __source;
    }    
    
    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==0)
        {
            return this.Offset;
        }
        else if(propertyIndex>=1 && propertyIndex < 1+this.Projection.size())
        {
            LensProjection Projection = this.Projection.get(propertyIndex-(1));
            return Projection;
        }
        else if(propertyIndex==1+this.Projection.size())
        {
            return this.XFactor;
        }
        else if(propertyIndex>=2+this.Projection.size() && propertyIndex < 2+this.Projection.size()+this.any.size())
        {
            return this.any.get(propertyIndex-(2+this.Projection.size())).getValue();
        }
        return null;
    }


    @Override
    public int getPropertyCount() {
        return 2+Projection.size()+ any.size();
    }

    @Override
    public void getPropertyInfo(int propertyIndex, Hashtable arg1, PropertyInfo info)
    {
            if(propertyIndex==0)
            {
                info.type = LensOffset.class;
                info.name = "Offset";
                info.namespace= "http://www.onvif.org/ver10/schema";
            }
            else if(propertyIndex>=1 && propertyIndex < 1+this.Projection.size())
            {
                info.type = LensProjection.class;
                info.name = "Projection";
                info.namespace= "http://www.onvif.org/ver10/schema";
            }
            else if(propertyIndex==1+this.Projection.size())
            {
                info.type = Float.class;
                info.name = "XFactor";
                info.namespace= "http://www.onvif.org/ver10/schema";
            }
            else if(propertyIndex>=2+this.Projection.size() && propertyIndex < 2+this.Projection.size()+this.any.size())
            {
                PropertyInfo j=this.any.get(propertyIndex-(2+this.Projection.size()));
                info.type = j.type;
                info.name = j.name;
                info.namespace= j.namespace;
            }
    }

    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }



        public int getAttributeCount() {
        return 1;
    }
    
    @Override
    public void getAttributeInfo(int index, AttributeInfo info) {
if(index==0)
        {
            info.name = "FocalLength";
            info.namespace= "";
            if(this.FocalLength!=null)
            {
                info.setValue(this.FocalLength);
            }
        
        }
        
    }

    @Override
    public void getAttribute(int i, AttributeInfo attributeInfo) {

    }

    @Override
    public void setAttribute(AttributeInfo attributeInfo) {

    }    
}
